<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Segmentation - Computer Vision]]></title>
      <url>/archives/Computer-Vision-segmentation.html</url>
      <content type="html"><![CDATA[<h1 id="class">Class</h1>
<ul>
<li>image segmentation (non-semantic)</li>
<li>graph-cut segmentation (non-semantic)</li>
<li>semantic segmentation</li>
<li>instance segmentation</li>
</ul>
<p>Object detection is just a bounding box, but segmentation will consider the shape, color, etc.</p>
<p>segmentation to make semantic partition. # 11.1 - naive: fully connected CRF - CNN - classification-&gt; is a class? / which class? - deconvolution network</p>
]]></content>
      
        <categories>
            
            <category> Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> English </tag>
            
            <tag> Segmentation </tag>
            
            <tag> Notes </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Project - Computer Vision]]></title>
      <url>/archives/Computer-Vision-Project.html</url>
      <content type="html"><![CDATA[<h1 id="section">2017.10.17</h1>
<p>In course CS348, Computer Vision, our coursework is to write a paper and submit it to a conference.</p>
<p>My Partners are Siqi Liu and Mengyao Cao. After discussion, we decided our draft topic as:</p>
<p>A Painting AI based on Cascaded Refinment Network</p>
<p>The PPT illustrates our scheme:</p>
<iframe src="../files/Computer Vision.pdf" style="width:718px; height:700px;" frameborder="0">
</iframe>
<p><a href="../files/Computer Vision.pdf">Download File</a></p>
<p>The final topic will be confirm in tomorrow’s class.</p>
<p>Wish our project a brilliant success!</p>
<h1 id="section-1">2017.10.25</h1>
<p>This time, I read a paper named <strong>A Neural Algorithm of Artistic Style</strong>.</p>
<p>This paper is about generating a picture with given real picture and a Painting. The generated picture will have both the feature of the painting and the initial picture.</p>
<p>For example, this is the painting used: <img src="/assets/rain-princess.jpg" alt="rain-princess"></p>
<p>Then, the Algorithm will produce a picture like this:</p>
<div class="figure">
<img src="/assets/dome-afremov.png" alt="dome-afremov">
<p class="caption">dome-afremov</p>
</div>
<p>It is so amazing!!</p>
<h3 id="the-paper">The paper</h3>
<p>The method of the paper is:</p>
<blockquote>
<p>Use the VGG-19 network to process the initial picture, noted by <span class="math inline">\(\mathbf{p}\)</span>, and the painting, noted by <span class="math inline">\(\mathbf{a}\)</span>, then at each layer, the nerwork will have some feature maps corresponding to <span class="math inline">\(\mathbf{p}\)</span> and <span class="math inline">\(\mathbf{a}\)</span>.</p>
</blockquote>
<blockquote>
<p>Input a noise picture <span class="math inline">\(\mathbf{x}\)</span> to the network, also, <span class="math inline">\(\mathbf{x}\)</span> will also have some featuremaps at every layers.</p>
</blockquote>
<blockquote>
<p>Define a loss function between <span class="math inline">\(\mathbf{x}\)</span> and <span class="math inline">\(\mathbf{p}\)</span>, called content loss. And a loss function between <span class="math inline">\(\mathbf{x}\)</span> and <span class="math inline">\(\mathbf{a}\)</span>, called style loss.Then, the author define a compound loss function:</p>
</blockquote>
<p><span class="math display">\[L_{total}(\mathbf{p}, \mathbf{a}, \mathbf{x})=\alpha L_{content}(\mathbf{x}, \mathbf{p}) + \beta L_{style}(\mathbf{x}, \mathbf{a})\]</span></p>
<blockquote>
<p>Using the optimization method to maximize the <span class="math inline">\(L_{total}\)</span>, and with this process, fix the noise picture <span class="math inline">\(\mathbf{x}\)</span>. Then, the noise picture will become the finally result.</p>
</blockquote>
<p>We can actually change the ratio between <span class="math inline">\(\alpha\)</span> and <span class="math inline">\(\beta\)</span> to change the ratio of content and style.</p>
]]></content>
      
        <categories>
            
            <category> Research </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> Deep Learning </tag>
            
            <tag> CS348 </tag>
            
            <tag> Coursework </tag>
            
            <tag> English </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Memory Management in Linux]]></title>
      <url>/archives/system_note_1017.html</url>
      <content type="html"><![CDATA[<h2 id="memory-in-linux">Memory in Linux</h2>
<h3 id="page-allocation">Page Allocation</h3>
<p>Linux uses the <strong>Buddy algorithm</strong> to effectively allocate and deallocate blocks of pages.</p>
<p>The page allocation code attempts to allocate a block of one or more physical pages. Pages are allocated in blocks which are powers of 2 in size. That means that it can allocate a block 1 page, 2 pages, 4 pages and so on. So long as there are enough free pages in the system to grant this request (nr_free_pages &gt; min_free_pages) the allocation code will search the free_area for a block of pages of the size requested. Each element of the free_area has a map of the allocated and free blocks of pages for that sized block. For example, element 2 of the array has a memory map that describes free and allocated blocks each of 4 pages long.</p>
<p>The allocation algorithm first searches for blocks of pages of the size requested. It follows the chain of free pages that is queued on the list element of the free_area data structure. If no blocks of pages of the requested size are free, blocks of the next size (which is twice that of the size requested) are looked for. This process continues until all of the free_area has been searched or until a block of pages has been found. If the block of pages found is larger than that requested it must be broken down until there is a block of the right size. Because the blocks are each a power of 2 pages big then this breaking down process is easy as you simply break the blocks in half. The free blocks are queued on the appropriate queue and the allocated block of pages is returned to the caller.</p>
<p><img src="/assets/free-area.gif" alt="free-area"> Figure 3.4: The free_area data structure</p>
<blockquote>
<p>4 means 4, 5, 6, 7 is free, size = 4 page</p>
</blockquote>
<blockquote>
<p>if page_1 become free, combine with page_0 to be size of 2, page_1 and page_0 is good buddy instead of page_2</p>
</blockquote>
<blockquote>
<p>use map to judge if they’re buddy</p>
</blockquote>
<p>For example, in Figure 3.4 if a block of 2 pages was requested, the first block of 4 pages (starting at page frame number 4) would be broken into two 2 page blocks. The first, starting at page frame number 4 would be returned to the caller as the allocated pages and the second block, starting at page frame number 6 would be queued as a free block of 2 pages onto element 1 of the free_area array. ### 3.5 Memory Mapping &gt; who need virtual? &gt; - loading program &gt; - malloc &gt; - stack &gt; - code dynamic linking &gt; - mmap</p>
<ul>
<li>Find : task_struct -&gt; mm_struct -&gt; vm_area_struct -&gt; page table(页表) -&gt; page</li>
</ul>
<p>When an image is executed, the contents of the executable image must be brought into the processes virtual address space. The same is also true of any shared libraries that the executable image has been linked to use. The executable file is not actually brought into physical memory, instead it is merely linked into the processes virtual memory. Then, as the parts of the program are referenced by the running application, the image is brought into memory from the executable image. This linking of an image into a processes virtual address space is known as memory mapping.</p>
<p><img src="/assets/vm_area.gif" alt="vm_area"> Figure 3.5: Areas of Virtual Memory</p>
<p>Every processes virtual memory is represented by an mm_struct data structure. This contains information about the image that it is currently executing (for example bash) and also has pointers to a number of vm_area_struct data structures. Each vm_area_struct data structure describes the start and end of the area of virtual memory, the processes access rights to that memory and a set of operations for that memory. These operations are a set of routines that Linux must use when manipulating this area of virtual memory. For example, one of the virtual memory operations performs the correct actions when the process has attempted to access this virtual memory but finds (via a page fault) that the memory is not actually in physical memory. This operation is the nopage operation. The nopage operation is used when Linux demand pages the pages of an executable image into memory.</p>
<p>When an executable image is mapped into a processes virtual address a set of vm_area_struct data structures is generated. Each vm_area_struct data structure represents a part of the executable image; the executable code, initialized data (variables), unitialized data and so on. Linux supports a number of standard virtual memory operations and as the vm_area_struct data structures are created, the correct set of virtual memory operations are associated with them.</p>
<h3 id="the-linux-page-cache">The Linux Page Cache</h3>
<p><img src="/assets/page-cache.gif" alt="page-cache"> Figure 3.6: The Linux Page Cache</p>
<p>The role of the Linux page cache is to speed up access to files on disk. Memory mapped files are read a page at a time and these pages are stored in the page cache. Figure 3.6 shows that the page cache consists of the page_hash_table, a vector of pointers to mem_map_t data structures.</p>
<p>Each file in Linux is identified by a VFS inode data structure (described in Chapter filesystem-chapter) and each VFS inode is unique and fully describes one and only one file. The index into the page table is derived from the file’s VFS inode and the offset into the file.</p>
<p>Whenever a page is read from a memory mapped file, for example when it needs to be brought back into memory during demand paging, the page is read through the page cache. If the page is present in the cache, a pointer to the mem_map_t data structure representing it is returned to the page fault handling code. Otherwise the page must be brought into memory from the file system that holds the image. Linux allocates a physical page and reads the page from the file on disk.</p>
<p>If it is possible, Linux will initiate a read of the next page in the file. This single page read ahead means that if the process is accessing the pages in the file serially, the next page will be waiting in memory for the process.</p>
<p>Over time the page cache grows as images are read and executed. Pages will be removed from the cache as they are no longer needed, say as an image is no longer being used by any process. As Linux uses memory it can start to run low on physical pages. In this case Linux will reduce the size of the page cache.</p>
<h3 id="reference">Reference</h3>
<p><a href="http://www.tldp.org/LDP/tlk/" target="_blank" rel="external">The Linux Kernel</a></p>
]]></content>
      
        <categories>
            
            <category> Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> English </tag>
            
            <tag> Operate System </tag>
            
            <tag> Memory </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TOEFL Note]]></title>
      <url>/archives/toefl-note-1017.html</url>
      <content type="html"><![CDATA[<h1 id="toelf-test">Toelf Test</h1>
<p>I have applied for the toefl test on Dec 2 in SEIEE, SJTU. This article is a note for my preparing of it. <!-- !(toelf_note_1017)(/assets/toelf_note_1017.jpeg) --></p>
<h1 id="vocabulary-book">Vocabulary Book</h1>
<p>postulate n. 基本条件；假定 vt. 假定；要求；视…为理所当然 deprive of vt. 剥夺；失去 strip n. 带；条状；脱衣舞 vt. 剥夺；剥去；脱去衣服 vi. 脱去衣服 diffused adj. 散布的，扩散的；普及的 v. 散布，传播（diffuse的过去分词）；使分散 fusion n. 融合；熔化；熔接；融合物；(物) 核聚变 dispersed v. 分散；传播（disperse的过去分词） adj. 散布的；被分散的；被驱散的 disclaim vt. 否认，拒绝；放弃，弃权；拒绝承认 vi. 否认；放弃；弃权 exclaim vt. 大声说出 vi. 呼喊，惊叫；大声叫嚷 proclaim vt. 宣告，公布；声明；表明；赞扬 disdain n. 蔑视 vt. 鄙弃 scorn n. 轻蔑；嘲笑；藐视的对象 vt. 轻蔑；藐视；不屑做 vi. 表示轻蔑；表示鄙视 disruption n. 破坏，毁坏；分裂，瓦解 diverse adj. 不同的；多种多样的；变化多的 eliminate vt. 消除；排除 subliminal n. 潜意识；阈下意识 adj. (生理) 阈下的；潜在意识的；微小得难以察觉的 immerge vi. 浸入；埋头；隐没 submerge vt. 淹没；把…浸入；沉浸 vi. 淹没；潜入水中；湮没 encroach vi. 蚕食，侵占 extruded adj. 压出的；受挤压的 v. 使…喷出；使伸出；驱逐（extrude的过去分词） invade vt. 侵略；侵袭；侵扰；涌入 vi. 侵略；侵入；侵袭；侵犯 preface n. 前言；引语 vt. 为…加序言；以…开始 vi. 作序 refusal n. 拒绝；优先取舍权；推却；取舍权 discharge n. 排放；卸货；解雇 vt. 解雇；卸下；放出；免除 vi. 排放；卸货；流出 improvise vt. 即兴创作；即兴表演；临时做；临时提供 vi. 即兴创作；即兴表演；临时凑合 excavate vt. 挖掘；开凿 vi. 发掘；细查 expedite vt. 加快；促进；发出 adj. 畅通的；迅速的；方便的 adversely adv. 不利地；逆地；反对地 expedition n. 远征；探险队；迅速 ordinance n. 条例；法令；圣餐礼 grant n. 拨款；(法) 授予物 vt. 授予；允许；承认 vi. 同意 n. (Grant)人名；(瑞典、葡、西、俄、罗、英、塞、德、意)格兰特；(法)格朗 prominence n. 突出；显著；突出物；卓越 estate n. 房地产；财产；身份 far-reaching adj. 深远的；广泛的；伸至远处的 fertility n. 多产；肥沃；(农经) 生产力；丰饶 sterility n. (泌尿) 不育；(妇产) 不孕；无菌；不毛；内容贫乏 flourish n. 兴旺；茂盛；挥舞；炫耀；华饰 vi. 繁荣，兴旺；茂盛；活跃；处于旺盛时期 vt. 夸耀；挥舞 fluctuate vi. 波动；涨落；动摇 vt. 使波动；使动摇 prosperous adj. 繁荣的；兴旺的 actuate vt. 开动（机器等）；促使，驱使；激励（人等） demote vt. 使降级；使降职 swing n. 摇摆；摆动；秋千；音律；涨落 adj. 旋转的；悬挂的；强节奏爵士音乐的 vt. 使旋转；挥舞；悬挂 vi. 摇摆；转向；悬挂；大摇大摆地行走 n. (Swing)人名；(英、瑞典)斯温 distinct from vt. 与……不同 draw upon 利用；开出；总结 early on 在早期；从事，经营；继续下去 bidden v. (贸易) 出价（bid的过去分词） forebode v. 预示；预感；预兆 foul n. 犯规；缠绕 adj. 犯规的；邪恶的；污秽的；淤塞的 vt. 犯规；弄脏；淤塞；缠住，妨害 adv. 违反规则地，不正当地 vi. 犯规；腐烂；缠结 disgusting adj. 令人厌恶的 令人极不能接受的 frontier n. 前沿；边界；国境 adj. 边界的；开拓的 n. (Frontier)人名；(法)弗龙捷 preface n. 前言；引语 vt. 为…加序言；以…开始 vi. 作序 exaggerate vt. 使扩大；使增大 vi. 夸大；夸张 get through to 使理解；打通电话 haul n. 拖，拉；用力拖拉；努力得到的结果；捕获物；一网捕获的鱼量；拖运距离 vt. 拖运；拖拉 vi. 拖，拉；改变主意；改变方向 n. (Haul)人名；(德)豪尔 drought n. 干旱；缺乏 n. (Drought)人名；(英)德劳特 headquarter vt. 在…设总部 vi. 设立总部 account for 对…负有责任；对…做出解释；说明……的原因；导致；（比例）占 open up 打开；开发；开始；展示，揭露 hypothesize vt. 假设，假定 vi. 假设，假定 hypotension n. 低血压，血压过低 ceased v. 停止（cease的过去式及过去分词形式）；中止；中断 industrialize vt. 使工业化 vi. 实现工业化 gratify vt. 使满足；使满意，使高兴 rectify vt. 改正；精馏；整流 immaturity n. 未成熟；粗糙；未臻完美；不完全 immaculate adj. 完美的；洁净的；无瑕疵的 incompatibility n. 不相容；不协调；不一致 landscape n. 风景；风景画；景色；山水画；乡村风景画；地形；（文件的）横向打印格式 vt. 对…做景观美化，给…做园林美化；从事庭园设计 vi. 美化（环境等），使景色宜人；从事景观美化工作，做庭园设计师 scratch n. 擦伤；抓痕；刮擦声；乱写 vt. 抓；刮；挖出；乱涂 adj. 打草稿用的；凑合的；碰巧的 vi. 抓；搔；发刮擦声；勉强糊口；退出比赛 autonomously adv. 自治地；独立自主地 incrementally adv. 递增地；增值地 flaw n. 瑕疵，缺点；一阵狂风；短暂的风暴；裂缝，裂纹 v. 使生裂缝，使有裂纹；使无效；使有缺陷 vi. 生裂缝；变的有缺陷 colossal adj. 巨大的；异常的，非常的 anticipate vt. 预期，期望；占先，抢先；提前使用 trajectory n. (物) 轨道，轨线；(航)(军) 弹道 relevance n. 关联；适当；中肯 archaeology n. 考古学 考古学的 sheer n. 偏航；透明薄织物 adj. 绝对的；透明的；峻峭的；纯粹的 vt. 使偏航；使急转向 adv. 完全；陡峭地 vi. 偏航 measurable adj. 可测量的；重要的；重大的 conversely adv. 相反地 silts n. 砂浆；泥浆（silt的复数） v. 淤积；使…淤塞（silt的第三人称单数） deposite 放置 沉积 存款 erosion n. 侵蚀，腐蚀 crucial adj. 重要的；决定性的；定局的；决断的 liberty n. 自由；许可；冒失 n. (Liberty)人名；(英)利伯蒂 autonomy n. 自治，自治权 competent adj. 胜任的；有能力的；能干的；足够的 chaos abbr. 恐惧邀请综合征（Can’t Have Anyone Over Syndrome） discipline n. 学科；纪律；训练；惩罚 vt. 训练，训导；惩戒 manipulative adj. 巧妙处理的；操纵的，用手控制的 interfere vi. 干涉；妨碍；打扰 vt. 冲突；介入 monitors n. (自) 监视器，监控器；情况通报（monitor复数形式） sensorial adj. 知觉的；感觉的 fascinating adj. 迷人的；吸引人的；使人神魂颠倒的 v. 使…着迷；使…陶醉（fascinate的ing形式） mud n. 泥；诽谤的话；无价值的东西 vt. 弄脏；用泥涂 vi. 钻入泥中 contract n. 合同；婚约 vt. 感染；订约；使缩短 vi. 收缩；感染；订约 shrink vi. 收缩；畏缩 n. 收缩；畏缩；<俚>精神病学家 vt. 使缩小，使收缩 slump vt. 使降低；使衰落；使倒下 n. 衰退；暴跌；消沉 vi. 下降，衰落；倒下；大幅度下降，暴跌 incline n. 倾斜；斜面；斜坡 vt. 使倾斜；使倾向于 vi. 倾斜；倾向；易于 gently adv. 轻轻地；温柔地，温和地 terrain n. (地理) 地形，地势；领域；地带 trek n. 艰苦跋涉 vi. 艰苦跋涉 vt. （牛）拉（货车）；搬运 n. (Trek)人名；(阿拉伯)特里克 surmise n. 推测；猜度 vt. 猜测；推测 vi. 猜测；认为 dump n. 垃圾场；仓库；无秩序地累积 vt. 倾倒；倾卸；丢下，卸下；摆脱，扔弃；倾销 vi. 倒垃圾；突然跌倒或落下；卸货；转嫁（责任等） n. （英）邓普（人名，男子教名Humphrey、Humphry的昵称） skeuomorphs n. (与原物同形但材料不同的)同形物 suitability n. 适合；适当；相配 problematic adj. 问题的；有疑问的；不确定的 spectacular adj. 壮观的，惊人的；公开展示的 portion n. 部分；一份；命运 vt. 分配；给…嫁妆 beverages n. 饮料；酒水；饮料类（beverage的复数形式） spices n. 香味料，调味料（spice的复数） Internally adv. 内部地；国内地；内在地 endowed v. 赋予；捐赠 domestic n. 国货；佣人 adj. 国内的；家庭的；驯养的；一心只管家务的 rural adj. 农村的，乡下的；田园的，有乡村风味的 cottage n. 小屋；村舍；（农舍式的）小别墅 peasants 农民 conducive adj. 有益的；有助于…的 entrepreneurs n. 企业家（entrepreneur的复数） precursor n. 先驱，前导 diversification n. 多样化；变化 breed n. (生物) 品种；种类，类型 vt. 繁殖；饲养；养育，教育；引起 vi. 繁殖；饲养；产生 n. (Breed)人名；(英)布里德 livestock n. 牲畜；家畜 burgeon vt. 萌芽, 发芽 n. 芽, 嫩枝 vi. 萌芽, 发芽 pastures 牧草 parcels (邮) 包裹 小包（parcel的名词复数） 打包 捆扎（parcel的第三人称单数） enclosures n. 附件（enclosure的复数）；音箱；(建) 围墙；围绕</俚></p>
]]></content>
      
        <categories>
            
            <category> Notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> English </tag>
            
            <tag> TOEFL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World!]]></title>
      <url>/archives/hello%20World.html</url>
      <content type="html"><![CDATA[<h1 id="hello-world">Hello World!</h1>
<p>My Website has successfully constructed!</p>
<p>I will post my diary, class notes, progesses on research, and some essays on my blog.</p>
<p><a href="jinningli.cn/blog.html">The URL of my blog is</a></p>
<pre><code>jinningli.cn/blog.html</code></pre>
<p><a href="jinningli.cn">The URL of my website is</a></p>
<pre><code>jinningli.cn</code></pre>
<p><a href="jinningli.cn/cv/cv.html">The URL of my CV is</a></p>
<pre><code>jinningli.cn/cv/cv.html</code></pre>
<h4 id="welcome-to-my-websites">Welcome to my websites!</h4>
<h4 id="w">=w=</h4>
]]></content>
      
        <categories>
            
            <category> Essay </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[本博客的知识共享协议说明]]></title>
      <url>/creativecommons.html</url>
      <content type="html"><![CDATA[<h1 id="关于知识共享协议的说明">关于知识共享协议的说明</h1>
<p><strong>Jinning Li</strong>（以下简称本人），是 <strong>“Jinning Li’s blog”</strong> 博客（以下简称本博客）的拥有者。本博客上创造和发布的内容可用于传播和共享，对于本人发布的原创内容（包含图片、文字、音乐、视频）采用 <strong>CreativeCommons 3.0 Unported</strong> 协议，即 <strong>知识共享许可协议 3.0 未本地化版本</strong> 加以许可保护。作者在发布内容时，如果没有特殊注明，默认将会采用 <strong>知识共享协议 署名-非商业性使用-相同方式共享 3.0 未本地化版本</strong> (<strong>CC BY-NC-SA 3.0 Unported</strong>) 对原创内容进行保护。</p>
<h1 id="关于知识共享协议的补充说明">关于知识共享协议的补充说明</h1>
<h2 id="侵权相关">侵权相关</h2>
<p>如个人或单位发现本博客上存在侵犯其自身合法权益的内容，请及时与本人取得联系，并提供具有法律效力的证明材料，以便本人作出处理。</p>
<h2 id="非原创作品商业使用相关">非原创作品商业使用相关</h2>
<p>任何被本博客划收录的非原创作品，原作者依然持有商业使用其作品的权利。<br>
如果您希望商业使用这些被收录的内容，请与所有 <strong>参与此作品创作的原作者</strong> 和/或 <strong>版权持有者</strong> 进行协商。在与所有人达成协议后，方可商业使用。<br>
（本博客及其本人不进行任何商业接洽工作，请自行与作者联系）</p>
<h1 id="cc-3.0-unported-协议">CC 3.0 Unported 协议</h1>
<h2 id="语言中文"><a href="https://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh" target="_blank" rel="external">语言：中文</a></h2>
<p><strong>您可以自由地：</strong> - <strong>分享</strong> — 在任何媒介以任何形式复制、发行本作品 - <strong>演绎</strong> — 修改、转换或以本作品为基础进行创作 - 只要你遵守许可协议条款，许可人就无法收回你的这些权利。</p>
<p><strong>惟须遵守下列条件：</strong> - <strong>署名</strong> — 你必须遵守信用，注明来源链接和演绎内容，并提供一个通往与 <strong>原作所用协议并不冲突的知识共享协议</strong> 许可证页面的链接。你可以用任何合适的方式实现这个，但这并不暗示许可证拥有者和原作者认可该分享方式。 - <strong>非商业性使用</strong> — 您不得将本作品用于商业目的。 - <strong>相同方式共享</strong> — 如果你节选、翻译、重排版，或基于本作品二次创作，你必须将你的贡献用 <strong>相同的协议</strong> 进行分享，并分别注明原作者与你的贡献。 - <strong>没有附加限制</strong> — 虽然您可能依旧不适用那些法律上限制的任何关于知识产权的法律条款或技术措施，即使你的行为符合知识共享协议。</p>
<h2 id="language-english"><a href="https://creativecommons.org/licenses/by-nc-sa/3.0/deed" target="_blank" rel="external">Language: English</a></h2>
<p><strong>You are free to:</strong> - <strong>Share</strong> — copy and redistribute the material in any medium or format - <strong>Adapt</strong> — remix, transform, and build upon the material - The licensor cannot revoke these freedoms as long as you follow the license terms.</p>
<p><strong>Under the following terms:</strong> - <strong>Attribution</strong> — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use. - <strong>NonCommercial</strong> — You may not use the material for commercial purposes. - <strong>ShareAlike</strong> — If you remix, transform, or build upon the material, you must distribute your contributions under the <strong>same license</strong> as the original. - <strong>No additional restrictions</strong> — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</p>
<blockquote>
<p>商业目的指的是通过使用分享来的内容用于商业活动当中或用于获得经济上的补偿。 Commercial purposes refers to the use of shared content to be used in business or to obtain economic compensation.</p>
</blockquote>
<h1 id="cc-3.0-unported-完整协议">CC 3.0 Unported 完整协议</h1>
<h2 id="languageenglish">Language:English</h2>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/3.0/legalcode" target="_blank" rel="external">CC by-nc-sa 3.0 Unported Legalcode</a> ## 语言：中文 <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/legalcode" target="_blank" rel="external">知识共享协议署名-非商业性使用-相同方式共享 3.0 中国大陆 许可协议</a></p>
<blockquote>
<p>请注意， <strong>CC 3.0 BY-NC-SA 中国大陆</strong> 版本协议由于其与本博客使用的 <strong>CC 3.0 BY-NC-SA Unported</strong> 协议仅具有相同要素(BY-NC-SA)而非同一司法管辖区（互相不适用两个地区分别的著作权保护有关的法律），<strong>故属于不同协议</strong>，但 <strong>CC 3.0 BY-NC-SA 中国大陆</strong> 版本协议可作为 <strong>CC 3.0 BY-NC-SA Unported</strong> 的翻译进行参考阅读。</p>
</blockquote>
<h1 id="您如何在不违反知识共享协议条约的基础上使用本博客的原创内容">您如何在不违反知识共享协议条约的基础上使用本博客的原创内容</h1>
<h2 id="商业使用">商业使用</h2>
<p><strong>CC 3.0 BY-NC-SA Unported</strong> 协议规定，只要他人注明本人的姓名并在以本人的作品为基础创作的新作品上适用同一类型的许可协议，该他人就可基于非商业目的对您的作品重新编排、节选或者以本人的作品为基础进行创作。基于本人的作品创作的所有新作品都要适用同一类型的许可协议，因此适用该项协议则对任何以您的原作为基础创作的演绎作品<strong>均不得进行商业性使用</strong>。</p>
<h2 id="署名方法">署名方法</h2>
<p>在转载本博客中任何内容时必须给出原页面的 URL 链接，并注明文章（全文，部分）从“Jinning Li’s Blog” 或转载，并提供一个与 CC 3.0 BY-NC-SA Unported 不相违背的知识共享协议的许可证； 如果你对本博客的原创内容进行了演绎，则必须注明演绎的内容；并提供 <strong>CC 3.0 BY-NC-SA 协议</strong> 的<a href="https://creativecommons.org/choose/results-one?license_code=by-nc-sa&amp;jurisdiction=cn&amp;version=3.0&amp;lang=zh" target="_blank" rel="external">许可证</a></p>
<h2 id="演绎政策">演绎政策</h2>
<p>本博客属于所有在网络上公开发表的，任何人可访问的作品。本人声明所有原创内容均<strong>允许演绎</strong>。 &gt; 知识共享协议中对 <em>演绎</em> 的定义为：在不改变原作者的原创内容的含义和内涵的基础上，对原创内容进行 节选、翻译、重排版，或将原作者的原创内容作为论据和素材，或基于原作者的原创内容进行二次创作。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tags Cloud「标签云」]]></title>
      <url>/tags.html</url>
      <content type="html"><![CDATA[
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Timeline「时光轴」]]></title>
      <url>/timeline.html</url>
      <content type="html"><![CDATA[
]]></content>
    </entry>
    
  
</search>
